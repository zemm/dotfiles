# Disable terminal flow control
#stty -ixon

# Colors

          BLACK='\e[0;30m'
           BLUE='\e[0;34m'
          GREEN='\e[0;32m'
           CYAN='\e[0;36m'
            RED='\e[0;31m'
         PURPLE='\e[0;35m'
          BROWN='\e[0;33m'
     LIGHT_GRAY='\e[0;37m'
      DARK_GRAY='\e[1;30m'
     LIGHT_BLUE='\e[1;34m'
    LIGHT_GREEN='\e[1;32m'
     LIGHT_CYAN='\e[1;36m'
      LIGHT_RED='\e[1;31m'
   LIGHT_PURPLE='\e[1;35m'
         YELLOW='\e[1;33m'
          WHITE='\e[1;37m'
    COLOR_RESET='\e[0m'


# Presets

          COLOR_USER=${COLOR_USER:-$GREEN}
          COLOR_HOST=${COLOR_HOST:-$GREEN}
 COLOR_USERHOSTSPLIT=${COLOR_USERHOSTSPLIT:-$GREEN}
           COLOR_CWD=${COLOR_CWD:-$LIGHT_PURPLE}

  COLOR_MODIFIED="$LIGHT_PURPLE"
     COLOR_ADDED="$LIGHT_GREEN"
   COLOR_DELETED="$LIGHT_RED"
   COLOR_UNCLEAN="$LIGHT_RED"
 COLOR_UNTRACKED="$BLUE"
   COLOR_STASHED="$YELLOW"
    COLOR_REMOTE="$BROWN"
   COLOR_DIVERGE="$BROWN"
    COLOR_BRANCH="$CYAN"
  COLOR_DETACHED="$CYAN"


# Git
# =========================================================

function is_git_repository {
	if ! which git &>/dev/null; then
		return 1
	fi
	git branch > /dev/null 2>&1
}

function generate_git_bar {
	local raw_status="$(git status 2> /dev/null)"

	local branch_pattern="^#? ?On branch ([^${IFS}]*)"
	local detached_at_pattern="#? ?HEAD detached at ([^${IFS}]*)"
	local detached_branch_pattern="#? ?Not currently on any branch"
	local remote_pattern="#? ?Your branch is (.*) of"
	local diverge_pattern="#? ?Your branch and (.*) have diverged"

	local branch=""
	if [[ ${raw_status} =~ ${branch_pattern} ]]; then
		branch=${COLOR_BRANCH}${BASH_REMATCH[1]}
	elif [[ ${raw_status} =~ ${detached_at_pattern} ]]; then
		local hash="${BASH_REMATCH[1]}"
		local name="$(git describe --contains --all HEAD)"
		branch="${LIGHT_GRAY}detached ${CYAN}${hash}${LIGHT_GRAY}:${CYAN}${name}"
	elif [[ ${raw_status} =~ ${detached_branch_pattern} ]]; then
		branch="${LIGHT_GRAY}detached"
	fi

	local flags=""
	if [[ ${raw_status} =~ ${remote_pattern} ]]; then
		if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
			flags="${COLOR_REMOTE}↑"
		else
			flags="${COLOR_REMOTE}↓"
		fi
	elif [[ ${raw_status} =~ ${diverge_pattern} ]]; then
		flags="${COLOR_DIVERGE}↕"
	fi

	[ "$(git stash list 2>/dev/null)" ] \
		&& flags="${flags}${COLOR_STASHED}˷"
	[[ ${raw_status} =~ "You have unmerged paths" ]] \
		&& flags="${flags}${COLOR_UNCLEAN}!"
	[[	${raw_status} =~ "#	modified: " || ${raw_status} =~ "#	renamed: " ]] \
		&& flags="${flags}${COLOR_MODIFIED}*"
	[[ ${raw_status} =~ "#	new file: " ]] \
		&& flags="${flags}${COLOR_ADDED}+"
	[[ ${raw_status} =~ "#	deleted: " ]] \
		&& flags="${flags}${COLOR_DELETED}-"
	[[ ${raw_status}} =~ "Untracked files" ]] \
		&& flags="${flags}${COLOR_UNTRACKED}?"

	[[ -n $flags ]] && flags=" ${flags}"

	echo "${CYAN}${branch}${flags}"
}


# Mercurial
# =========================================================

function is_mercurial_repository {
	# faster hg detection because of of stupid slow mercurial
	return $(upsearch_dir .hg > /dev/null)
}

function generate_mercurial_bar {
	local hg_status=$(hg status 2>/dev/null)
	local hg_summary=$(hg summary 2>/dev/null)

	local modified_pattern="^M "
	local untracked_pattern="^\? "
	local added_pattern="^A "
	local deleted_pattern="^R "
	local unclean_pattern="^\! "

	local state=""
	if echo "$hg_status" | egrep -q "${modified_pattern}"; then
		state="${state}${COLOR_MODIFIED}*"
	fi
	if echo "$hg_status" | egrep -q "${added_pattern}"; then
		state="${state}${COLOR_ADDED}+"
	fi
	if echo "$hg_status" | egrep -q "${deleted_pattern}"; then
		state="${state}${COLOR_DELETED}-"
	fi
	if echo "$hg_status" | egrep -q "${untracked_pattern}"; then
		state="${state}${COLOR_UNTRACKED}?"
	fi
	if echo "$hg_status" | egrep -q "${unclean_pattern}"; then
		state="${state}${COLOR_UNCLEAN}!"
	fi

	local branch
	if [[ ${hg_summary} =~ branch:[[:space:]]([^[[:space:]]+) ]]; then
		branch="${COLOR_BRANCH}${BASH_REMATCH[1]}:"
	else
		branch="${BROWN}NO BRANCH"
	fi

	# @TODO: multiple bookmarks?
	local bookmarks
	if [[ ${hg_summary} =~ bookmarks:[[:space:]]([^[[:space:]]+) ]]; then
		bookmarks="${COLOR_BRANCH}${BASH_REMATCH[1]}:"
	else
		bookmarks=""
	fi

	local hg_rev
	hg_rev=$(echo "${hg_summary}" | grep parent | awk -F: '{gsub(/ /, ""); print $2}')
	#hg_rev=$(hg log -l 1 --template="{rev}")
	local rev
	rev="${CYAN}r${hg_rev}"

	echo "${branch}${bookmarks}${rev}${state}"
}


# Other
# =========================================================

function generate_system_bar() {
	[[ $(jobs) =~ "Stopped" ]] \
		&& echo -n "${RED}§"
	[[ $(jobs) =~ "Running" ]] \
		&& echo -n "${GREEN}§"
}

function generate_nvm_bar {
	local version_pattern="node\/v([\.0-9]+)\/bin"
	if [ "$NVM_BIN" != "" ] && [[ $NVM_BIN =~ ${version_pattern} ]]; then
		local version="${BASH_REMATCH[1]}"
		echo " ${BLACK}nvm@${version}"
	fi
}

function generate_venv_bar() {
	if [[ -n $VIRTUAL_ENV ]]; then
		virtualenv_name=$(basename "$VIRTUAL_ENV")
		echo " ${BLACK}venv@${virtualenv_name}"
	fi
}

function auto_virtualenv() {
	# work only at whitelisted locations
	[[ -n "$AUTO_VENV_PATHS" ]] || return
	local cwd=$(pwd)
	IFS=';' read -ra allowed_paths <<< "$AUTO_VENV_PATHS"
	for allowed_path in "${allowed_paths[@]}"; do
		eval allowed_path=$allowed_path
		if [[ "${cwd}/" == $allowed_path/* ]]; then
			local use_venv=1
			break
		fi
	done

	if [[ -z $use_venv ]]; then
		# location is not whitelisted
		deactivate_venv
		return
	fi

	local auto_venv="$(upsearch_dir .venv)"
	# auto-activate
	if test -n "$auto_venv"; then
		# if we have auto-venv
		if [ "$auto_venv" != "$VIRTUAL_ENV" ]; then
			# if auto-venv is not already loaded
			if test -n "$VIRTUAL_ENV"; then
				# if we have another virtualenv, deactivate it
				log_action "deactivate" "$VIRTUAL_ENV"
				deactivate
			fi
			log_action "activate" "$auto_venv"
			source "$auto_venv/bin/activate"
		fi
	else
		deactivate_venv
	fi
}

function deactivate_venv() {
	# auto-deactivate
	if [[ "$VIRTUAL_ENV" == */.venv ]]; then
		log_action "deactivate" "$VIRTUAL_ENV"
		deactivate
	fi
}

function upsearch_dir() {
	test '/' == "$PWD" && return 1 \
		|| test -d "$1" && cd "$1" && pwd && return 0 \
		|| cd .. && upsearch_dir "$1"
}

function log_action() {
	local action=$1; shift
	local params="$@"
	local line=" ${LIGHT_CYAN}-> ${LIGHT_GREEN}${action} ${COLOR_RESET}${params}${COLOR_RESET}"
	if [[ ! -z $ACTION_LOG ]]; then
		ACTION_LOG="${ACTION_LOG}\n$line"
	else
		ACTION_LOG="$line"
	fi
}

# Prompt
# =========================================================

function prompt_func() {
	ACTION_LOG=""

	# <user>@<host>
	userbar="${COLOR_USER}\u${COLOR_USERHOSTSPLIT}@${COLOR_HOST}\h"
	# <current working directory>
	cwdbar="${COLOR_CWD}\w"

	# preprocess
	auto_virtualenv

	# actionlog
	if test -n "$ACTION_LOG"; then
		actionlog="${ACTION_LOG}\n"
	else
		actionlog=""
	fi

	# prompt
	if [ $(id -u) -eq 0 ]; then
		# Use red # as prompt char when root
		prompt="${RED}#${COLOR_RESET} "
	else
		prompt="${COLOR_RESET}$ "
	fi

	# vcs
	local vcsbar=""
	if is_git_repository; then
		vcsbar="$(generate_git_bar) "
	elif is_mercurial_repository; then
		vcsbar="$(generate_mercurial_bar) "
	fi

	# system
	sysbar="$(generate_system_bar)"

	local line1="${BLACK}╭ ${userbar} ${cwdbar}$(generate_venv_bar)$(generate_nvm_bar)"
	local line2="${BLACK}╰ ${vcsbar}${sysbar}${prompt}"
	PS1="${actionlog}${line1}\n${line2}"
}

PROMPT_COMMAND=prompt_func
